/**
 *This program is free software: you can redistribute it and/or modify
 *it under the terms of the GNU General Public License as published by
 *the Free Software Foundation, either version 3 of the License, or
 *(at your option) any later version.
 *
 *This program is distributed in the hope that it will be useful,
 *but WITHOUT ANY WARRANTY; without even the implied warranty of
 *MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *GNU General Public License for more details.
 *
 *You should have received a copy of the GNU General Public License
 *along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * GruntForm.java
 *
 * Created on Aug 17, 2009, 11:38:54 PM
 */
package net.whn.loki.grunt;

import net.whn.loki.IO.GruntIOHelper;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import net.whn.loki.common.AboutForm;
import net.whn.loki.common.ICommon.GruntTxtStatus;
import net.whn.loki.common.ICommon.TaskStatus;
import net.whn.loki.common.LokiForm;
import net.whn.loki.common.PreferencesForm;
import net.whn.loki.common.ProgressUpdate;

/**
 *
 * @author daniel
 */
public class GruntForm extends LokiForm {

    public GruntForm(GruntR g) {
        initComponents();
        grunt = g;
        prefForm = new PreferencesForm(grunt.getCfg());
        prefForm.setLocationRelativeTo(this);

        //log.setLevel(Level.FINE);
    }

    public void setLblConnection(String text) {
        lblConnection.setText(text);
    }

    public void setStatus(GruntStatusText s) {
        if (s.getStatus() == GruntTxtStatus.BUSY) {
            lblStatus.setText("busy");
            pBar.setIndeterminate(true);
        } else if (s.getStatus() == GruntTxtStatus.IDLE) {
            lblStatus.setText("idle");
            pBar.setValue(0);
            pBar.setIndeterminate(false);
        } else if (s.getStatus() == GruntTxtStatus.FETCH) {
            String txt = "fetching file " +
                    GruntIOHelper.generateHumanReadableFileSize(s.getFileSize());
            lblStatus.setText(txt);
            pBar.setIndeterminate(false);
            log.fine(txt);
        } else if (s.getStatus() == GruntTxtStatus.PREP_CACHE) {
            lblStatus.setText("preparing blendcache");
            pBar.setIndeterminate(true);
        }else if (s.getStatus() == GruntTxtStatus.SEND) {
            String txt = "sending output file " +
                    GruntIOHelper.generateHumanReadableFileSize(s.getFileSize());
            lblStatus.setText(txt);
            pBar.setIndeterminate(false);
            log.fine(txt);
        } else if (s.getStatus() == GruntTxtStatus.PENDING_SEND) {
            lblStatus.setText("waiting to send output file");
            pBar.setIndeterminate(false);
        } else if (s.getStatus() == GruntTxtStatus.ABORT) {
            lblStatus.setText("task aborted");
            pBar.setValue(0);
            pBar.setIndeterminate(false);
        } else if (s.getStatus() == GruntTxtStatus.ERROR) {
            lblStatus.setText("error");
            pBar.setValue(0);
            pBar.setIndeterminate(false);
        } else {
            log.warning("unknown setStatus value: " + s);
        }

    }

    /**
     * called by grunt via EventQueue when it has an update
     */
    public void updateProgressBar(ProgressUpdate update) {
        //pBar.setIndeterminate(false);
        pBar.setMaximum(update.getMax());
        pBar.setValue(update.getDone());
    }

    public void exitNoQuery() {
        grunt.signalShutdown();
        prefForm.dispose();
        dispose();

    }

    /*PACKAGE*/
    void saveBlenderBin(String bBin) {
    }

    /*BEGIN PRIVATE*/
    //logging
    private static final String className = "net.whn.loki.grunt.GruntForm";
    private static final Logger log = Logger.getLogger(className);
    private final GruntR grunt;
    private final PreferencesForm prefForm;

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        pBar = new javax.swing.JProgressBar();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        lblConnection = new javax.swing.JLabel();
        lblStatus = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        menuFile = new javax.swing.JMenu();
        miLog = new javax.swing.JMenuItem();
        miPreferences = new javax.swing.JMenuItem();
        miQuit = new javax.swing.JMenuItem();
        menuTask = new javax.swing.JMenu();
        miAbort = new javax.swing.JMenuItem();
        menuHelp = new javax.swing.JMenu();
        miAbout = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Loki Render - grunt");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                windowClosingActionPerformed(evt);
            }
        });

        pBar.setToolTipText("displays activity while a task is running, or progress bar during file transfer");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pBar, javax.swing.GroupLayout.DEFAULT_SIZE, 385, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(pBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 64, Short.MAX_VALUE)
        );

        lblConnection.setText("attempting to connect with master...");
        lblConnection.setToolTipText("current connection status with the master");

        lblStatus.setText("idle");
        lblStatus.setToolTipText("this grunt's current status");

        jLabel1.setText("Connection:");

        jLabel2.setText("My status:");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblConnection)
                    .addComponent(lblStatus))
                .addContainerGap(65, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(16, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(lblConnection)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblStatus))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2)))
                .addContainerGap())
        );

        menuFile.setText("File");

        miLog.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.CTRL_MASK));
        miLog.setText("View Log");
        miLog.setEnabled(false);
        menuFile.add(miLog);

        miPreferences.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.CTRL_MASK));
        miPreferences.setText("Preferences");
        miPreferences.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miPreferencesActionPerformed(evt);
            }
        });
        menuFile.add(miPreferences);

        miQuit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_MASK));
        miQuit.setText("Quit");
        miQuit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miQuitActionPerformed(evt);
            }
        });
        menuFile.add(miQuit);

        jMenuBar1.add(menuFile);

        menuTask.setText("Task");

        miAbort.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_MASK));
        miAbort.setText("Abort and quit");
        miAbort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miAbortActionPerformed(evt);
            }
        });
        menuTask.add(miAbort);

        jMenuBar1.add(menuTask);

        menuHelp.setText("Help");

        miAbout.setText("About");
        miAbout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miAboutActionPerformed(evt);
            }
        });
        menuHelp.add(miAbout);

        jMenuBar1.add(menuHelp);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitQuery() {
        boolean quit = true;
        if (grunt.isBusy()) {
            int result = JOptionPane.showConfirmDialog(this,
                    "A task is currently running. If you quit now, the\n" +
                    "task will be aborted and progress will be lost.",
                    "Abort and Quit?",
                    JOptionPane.OK_OPTION, JOptionPane.WARNING_MESSAGE);
            if (result != 0) {
                quit = false;
            }
        }
        if (quit) {
            grunt.signalShutdown();
            prefForm.dispose();
            dispose();
        }
    }

    private void windowClosingActionPerformed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_windowClosingActionPerformed
        exitQuery();
    }//GEN-LAST:event_windowClosingActionPerformed

    private void miPreferencesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miPreferencesActionPerformed
        prefForm.updateCacheValues();
        prefForm.setVisible(true);
    }//GEN-LAST:event_miPreferencesActionPerformed

    private void miAbortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miAbortActionPerformed
        abort();
    }//GEN-LAST:event_miAbortActionPerformed

    private void miAboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miAboutActionPerformed
        AboutForm aboutForm = new AboutForm(grunt.getCfg().getLokiVer());
        aboutForm.setLocationRelativeTo(this);
        aboutForm.setVisible(true);
    }//GEN-LAST:event_miAboutActionPerformed

    private void miQuitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miQuitActionPerformed
        exitQuery();
    }//GEN-LAST:event_miQuitActionPerformed

    private void abort() {
        boolean quit = true;
        if (grunt.isBusy()) {
            int result = JOptionPane.showConfirmDialog(this,
                    "Progress on the current task will be lost. Are you sure?",
                    "Abort and quit?",
                    JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
            if (result != 0) {
                quit = false;
            }
        }
        if (quit) {
            grunt.abortCurrentTask(TaskStatus.LOCAL_ABORT);
            prefForm.dispose();
            dispose();
        }

    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JLabel lblConnection;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JMenu menuFile;
    private javax.swing.JMenu menuHelp;
    private javax.swing.JMenu menuTask;
    private javax.swing.JMenuItem miAbort;
    private javax.swing.JMenuItem miAbout;
    private javax.swing.JMenuItem miLog;
    private javax.swing.JMenuItem miPreferences;
    private javax.swing.JMenuItem miQuit;
    private javax.swing.JProgressBar pBar;
    // End of variables declaration//GEN-END:variables
}
