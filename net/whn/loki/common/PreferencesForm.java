/**
 *This program is free software: you can redistribute it and/or modify
 *it under the terms of the GNU General Public License as published by
 *the Free Software Foundation, either version 3 of the License, or
 *(at your option) any later version.
 *
 *This program is distributed in the hope that it will be useful,
 *but WITHOUT ANY WARRANTY; without even the implied warranty of
 *MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *GNU General Public License for more details.
 *
 *You should have received a copy of the GNU General Public License
 *along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * PreferencesForm.java
 *
 * Created on Oct 2, 2009, 8:46:52 PM
 */
package net.whn.loki.common;

import java.net.InetAddress;
import java.net.UnknownHostException;
import net.whn.loki.CL.CLHelper;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import net.whn.loki.common.ICommon.LokiRole;

/**
 *
 * @author daniel
 */
public class PreferencesForm extends LokiForm {

    /** Creates new form PreferencesForm */
    public PreferencesForm(Config c) {
        initComponents();
        cfg = c;

        //general
        updateCacheValues();
        if (cfg.getRole() == LokiRole.ASK) {
            rbtnAskMe.setSelected(true);
        } else if (cfg.getRole() == LokiRole.GRUNT) {
            rbtnGrunt.setSelected(true);
        } else if (cfg.getRole() == LokiRole.MASTER) {
            rbtnMaster.setSelected(true);
        } else if (cfg.getRole() == LokiRole.MASTER_GRUNT) {
            rbtnMasterAndGrunt.setSelected(true);
        } else {
            log.severe("unknown role: " + cfg.getRole());
        }
        
        if(cfg.getAutoFileHandling()) {
            rbtnAutoFile.setSelected(true);
        } else {
            rbtnManualFile.setSelected(true);
            pnlCache.setEnabled(false);
        }
        
      
        //grunt
        txtBlenderBin.setText(cfg.getBlenderBin());
        if(!cfg.getAutoDiscoverMaster()) {
            rbtnManualIP.setSelected(true);
            txtMasterManualIP.setText(cfg.getMasterIp().getHostAddress());
            txtMasterManualIP.setEnabled(true);
        }

        //master
        txtMulticastAddress.setText(cfg.getMulticastAddress().getHostAddress());
        txtMulticastPort.setText(Integer.toString(cfg.getGruntMulticastPort()));
        txtTTL.setText(Integer.toString(cfg.getMulticastTTL()));
        txtAnnounceInterval.setText(Integer.toString(cfg.getAnnounceInterval()));
        txtAcceptPort.setText(Integer.toString(cfg.getConnectPort()));
    }

    public void updateCacheValues() {
        spinnerCacheSizeLimit.setValue(cfg.getCacheSizeLimitMB());
        txtCurrentCacheSize.setText(cfg.getCacheSizeStr());
    }
    
    //validation stuff
    private static final String IPADDRESS_PATTERN = 
		"^([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\." +
		"([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\." +
		"([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\." +
		"([01]?\\d\\d?|2[0-4]\\d|25[0-5])$";
    
    
    public static boolean validateIP(final String ip) {
        Pattern pattern = Pattern.compile(IPADDRESS_PATTERN);
        Matcher matcher = pattern.matcher(ip);
        
        return matcher.matches();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btngrpRole = new javax.swing.ButtonGroup();
        btngrpMasterAddress = new javax.swing.ButtonGroup();
        btngrpFileHandling = new javax.swing.ButtonGroup();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        pnlGeneral = new javax.swing.JPanel();
        pnlRole = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        rbtnGrunt = new javax.swing.JRadioButton();
        rbtnMaster = new javax.swing.JRadioButton();
        rbtnMasterAndGrunt = new javax.swing.JRadioButton();
        rbtnAskMe = new javax.swing.JRadioButton();
        pnlCache = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        spinnerCacheSizeLimit = new javax.swing.JSpinner();
        jLabel3 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        txtCurrentCacheSize = new javax.swing.JLabel();
        pnlFileHandling = new javax.swing.JPanel();
        rbtnAutoFile = new javax.swing.JRadioButton();
        rbtnManualFile = new javax.swing.JRadioButton();
        btnFileHelp = new javax.swing.JButton();
        pnlGrunt = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        txtBlenderBin = new javax.swing.JTextField();
        btnBrowseForBlenderBin = new javax.swing.JButton();
        pnlMasterIp = new javax.swing.JPanel();
        rbtnAutoIP = new javax.swing.JRadioButton();
        rbtnManualIP = new javax.swing.JRadioButton();
        txtMasterManualIP = new javax.swing.JTextField();
        pnlMaster = new javax.swing.JPanel();
        pnlNetwork = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtMulticastAddress = new javax.swing.JTextField();
        txtMulticastPort = new javax.swing.JTextField();
        txtAcceptPort = new javax.swing.JTextField();
        txtTTL = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        txtAnnounceInterval = new javax.swing.JTextField();
        btnCancel = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Preferences");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        pnlGeneral.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        pnlRole.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Role", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("DejaVu Sans", 1, 13))); // NOI18N
        pnlRole.setToolTipText("");

        jLabel1.setText("Select Loki Render's role on startup:");

        btngrpRole.add(rbtnGrunt);
        rbtnGrunt.setText("Grunt");
        rbtnGrunt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbtnGruntActionPerformed(evt);
            }
        });

        btngrpRole.add(rbtnMaster);
        rbtnMaster.setText("Master");

        btngrpRole.add(rbtnMasterAndGrunt);
        rbtnMasterAndGrunt.setText("Master and Grunt");

        btngrpRole.add(rbtnAskMe);
        rbtnAskMe.setSelected(true);
        rbtnAskMe.setText("Ask me");

        javax.swing.GroupLayout pnlRoleLayout = new javax.swing.GroupLayout(pnlRole);
        pnlRole.setLayout(pnlRoleLayout);
        pnlRoleLayout.setHorizontalGroup(
            pnlRoleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlRoleLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlRoleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addGroup(pnlRoleLayout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addGroup(pnlRoleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(rbtnGrunt)
                            .addComponent(rbtnAskMe)
                            .addComponent(rbtnMaster)
                            .addComponent(rbtnMasterAndGrunt))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlRoleLayout.setVerticalGroup(
            pnlRoleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlRoleLayout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rbtnAskMe)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rbtnGrunt)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rbtnMaster)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rbtnMasterAndGrunt)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pnlCache.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Project File Cache", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("DejaVu Sans", 1, 13))); // NOI18N

        jLabel2.setText("Set a target limit of");

        spinnerCacheSizeLimit.setModel(new javax.swing.SpinnerNumberModel(100, 50, 4000, 10));
        spinnerCacheSizeLimit.setToolTipText("Loki will limit the cache size to this value, unless all the cached files are still being used by the job queue, in which case the cache will be allowed to grow larger.");

        jLabel3.setText("MB of space for the cache");

        jLabel7.setText("Current cache size:");

        txtCurrentCacheSize.setText("0 MB");
        txtCurrentCacheSize.setToolTipText("cache size will exceed the target limit if cached files are still associated with queued jobs.");

        javax.swing.GroupLayout pnlCacheLayout = new javax.swing.GroupLayout(pnlCache);
        pnlCache.setLayout(pnlCacheLayout);
        pnlCacheLayout.setHorizontalGroup(
            pnlCacheLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCacheLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlCacheLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlCacheLayout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(spinnerCacheSizeLimit, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3))
                    .addGroup(pnlCacheLayout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtCurrentCacheSize)))
                .addContainerGap(162, Short.MAX_VALUE))
        );
        pnlCacheLayout.setVerticalGroup(
            pnlCacheLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCacheLayout.createSequentialGroup()
                .addGroup(pnlCacheLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(spinnerCacheSizeLimit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlCacheLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(txtCurrentCacheSize))
                .addContainerGap(13, Short.MAX_VALUE))
        );

        pnlFileHandling.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Automatic File Transfer and Caching", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("DejaVu Sans", 1, 13))); // NOI18N

        btngrpFileHandling.add(rbtnAutoFile);
        rbtnAutoFile.setSelected(true);
        rbtnAutoFile.setText("Enable");
        rbtnAutoFile.setToolTipText("Loki automatically transfers and caches files between nodes as needed. \nIn most cases you want this.");
        rbtnAutoFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbtnAutoFileActionPerformed(evt);
            }
        });

        btngrpFileHandling.add(rbtnManualFile);
        rbtnManualFile.setText("Disable");
        rbtnManualFile.setToolTipText("You'll need to setup a network share in this mode. Typically used for large projects.");
        rbtnManualFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbtnManualFileActionPerformed(evt);
            }
        });

        btnFileHelp.setText("Help");
        btnFileHelp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFileHelpActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlFileHandlingLayout = new javax.swing.GroupLayout(pnlFileHandling);
        pnlFileHandling.setLayout(pnlFileHandlingLayout);
        pnlFileHandlingLayout.setHorizontalGroup(
            pnlFileHandlingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlFileHandlingLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlFileHandlingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlFileHandlingLayout.createSequentialGroup()
                        .addComponent(rbtnAutoFile)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnFileHelp, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlFileHandlingLayout.createSequentialGroup()
                        .addComponent(rbtnManualFile)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        pnlFileHandlingLayout.setVerticalGroup(
            pnlFileHandlingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlFileHandlingLayout.createSequentialGroup()
                .addGroup(pnlFileHandlingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbtnAutoFile)
                    .addComponent(btnFileHelp))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rbtnManualFile)
                .addContainerGap(18, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout pnlGeneralLayout = new javax.swing.GroupLayout(pnlGeneral);
        pnlGeneral.setLayout(pnlGeneralLayout);
        pnlGeneralLayout.setHorizontalGroup(
            pnlGeneralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlGeneralLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlGeneralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnlCache, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnlRole, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnlFileHandling, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        pnlGeneralLayout.setVerticalGroup(
            pnlGeneralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlGeneralLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlRole, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlFileHandling, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlCache, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("general", pnlGeneral);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Blender", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("DejaVu Sans", 1, 13))); // NOI18N

        jLabel9.setText("Blender executable path:");

        txtBlenderBin.setToolTipText("loki needs to know the blender executable when it starts as a grunt");

        btnBrowseForBlenderBin.setText("Browse");
        btnBrowseForBlenderBin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBrowseForBlenderBinActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtBlenderBin, javax.swing.GroupLayout.DEFAULT_SIZE, 552, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel9)
                            .addComponent(btnBrowseForBlenderBin, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtBlenderBin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnBrowseForBlenderBin)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pnlMasterIp.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Master IP address", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("DejaVu Sans", 1, 13))); // NOI18N
        pnlMasterIp.setToolTipText("restart loki grunt for this setting to take effect");

        btngrpMasterAddress.add(rbtnAutoIP);
        rbtnAutoIP.setSelected(true);
        rbtnAutoIP.setText("automatic discovery of address");
        rbtnAutoIP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbtnAutoIPActionPerformed(evt);
            }
        });

        btngrpMasterAddress.add(rbtnManualIP);
        rbtnManualIP.setText("manually specify address");
        rbtnManualIP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbtnManualIPActionPerformed(evt);
            }
        });

        txtMasterManualIP.setEnabled(false);

        javax.swing.GroupLayout pnlMasterIpLayout = new javax.swing.GroupLayout(pnlMasterIp);
        pnlMasterIp.setLayout(pnlMasterIpLayout);
        pnlMasterIpLayout.setHorizontalGroup(
            pnlMasterIpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMasterIpLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlMasterIpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rbtnAutoIP)
                    .addComponent(rbtnManualIP)
                    .addComponent(txtMasterManualIP, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlMasterIpLayout.setVerticalGroup(
            pnlMasterIpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMasterIpLayout.createSequentialGroup()
                .addComponent(rbtnAutoIP)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rbtnManualIP)
                .addGap(18, 18, 18)
                .addComponent(txtMasterManualIP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(48, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout pnlGruntLayout = new javax.swing.GroupLayout(pnlGrunt);
        pnlGrunt.setLayout(pnlGruntLayout);
        pnlGruntLayout.setHorizontalGroup(
            pnlGruntLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlGruntLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlGruntLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(pnlMasterIp, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        pnlGruntLayout.setVerticalGroup(
            pnlGruntLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlGruntLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlMasterIp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(92, Short.MAX_VALUE))
        );

        pnlMasterIp.getAccessibleContext().setAccessibleName("Master  IP address");
        pnlMasterIp.getAccessibleContext().setAccessibleDescription("");

        jTabbedPane1.addTab("local grunt", pnlGrunt);

        pnlNetwork.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Network settings", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("DejaVu Sans", 1, 13))); // NOI18N
        pnlNetwork.setToolTipText("these networks settings cannot currently be changed");

        jLabel4.setText("Announce multicast group:");

        jLabel5.setText("Announce port:");

        jLabel6.setText("Accept port:");

        txtMulticastAddress.setToolTipText("This is the multicast address that the master uses to announce itself on the network. Grunts listen on this address to find the master.");
        txtMulticastAddress.setEnabled(false);

        txtMulticastPort.setToolTipText("This is the port used in combination with the multicast address.");
        txtMulticastPort.setEnabled(false);
        txtMulticastPort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtMulticastPortActionPerformed(evt);
            }
        });

        txtAcceptPort.setToolTipText("The port grunts use to establish a connection with the master.");
        txtAcceptPort.setEnabled(false);

        txtTTL.setToolTipText("Time To Live for the multicast announcement. A value of '1' will only hit the local network. ");
        txtTTL.setEnabled(false);

        jLabel8.setText("Announce TTL:");

        jLabel10.setText("Announce Interval (ms):");

        txtAnnounceInterval.setToolTipText("Time interval between master announcements.");
        txtAnnounceInterval.setEnabled(false);

        javax.swing.GroupLayout pnlNetworkLayout = new javax.swing.GroupLayout(pnlNetwork);
        pnlNetwork.setLayout(pnlNetworkLayout);
        pnlNetworkLayout.setHorizontalGroup(
            pnlNetworkLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlNetworkLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlNetworkLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel10, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlNetworkLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtMulticastAddress, javax.swing.GroupLayout.DEFAULT_SIZE, 353, Short.MAX_VALUE)
                    .addGroup(pnlNetworkLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(txtAcceptPort, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(txtAnnounceInterval, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(txtTTL, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(txtMulticastPort, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)))
                .addContainerGap())
        );
        pnlNetworkLayout.setVerticalGroup(
            pnlNetworkLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlNetworkLayout.createSequentialGroup()
                .addGroup(pnlNetworkLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtMulticastAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlNetworkLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(txtMulticastPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlNetworkLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(txtTTL, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlNetworkLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(txtAnnounceInterval, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlNetworkLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtAcceptPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout pnlMasterLayout = new javax.swing.GroupLayout(pnlMaster);
        pnlMaster.setLayout(pnlMasterLayout);
        pnlMasterLayout.setHorizontalGroup(
            pnlMasterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMasterLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlNetwork, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        pnlMasterLayout.setVerticalGroup(
            pnlMasterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMasterLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlNetwork, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(201, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("local master", pnlMaster);

        btnCancel.setText("Cancel");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        btnSave.setText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        jLabel11.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jLabel11.setText("Restart Loki after 'Save' for all settings to take effect.");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnSave)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 620, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnCancel, btnSave});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSave)
                    .addComponent(btnCancel)
                    .addComponent(jLabel11))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void rbtnGruntActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbtnGruntActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rbtnGruntActionPerformed

    private void txtMulticastPortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtMulticastPortActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtMulticastPortActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        boolean valid = true;
        String mistakeStr = null;
        if (!CLHelper.isBlenderExe(txtBlenderBin.getText())) {
            valid = false;
            mistakeStr = "'" + txtBlenderBin.getText() +
                        "' is not a valid Blender \n" + "executable.";
                
        }

        //Grunt
        
        //General
        if (rbtnAskMe.isSelected()) {
            cfg.setRole(LokiRole.ASK);
        } else if (rbtnGrunt.isSelected()) {
            cfg.setRole(LokiRole.GRUNT);
        } else if (rbtnMaster.isSelected()) {
            cfg.setRole(LokiRole.MASTER);
        } else if (rbtnMasterAndGrunt.isSelected()) {
            cfg.setRole(LokiRole.MASTER_GRUNT);
        } else {
            log.severe("unexpected state for role selection");
        }
        
        cfg.setCacheSizeLimitMB((Integer) spinnerCacheSizeLimit.getValue());

        //Grunt
        if (rbtnAutoIP.isSelected()) {
            cfg.setAutoDiscoverMaster(true);
        }
        if (rbtnManualIP.isSelected()){
            if(validateIP(txtMasterManualIP.getText())){
               try {
                   InetAddress testy = 
                           InetAddress.getByName(txtMasterManualIP.getText());
                    cfg.setMasterIp(testy);
                    cfg.setAutoDiscoverMaster(false);
                } catch (UnknownHostException uhex) {
                    valid = false;
                    mistakeStr = "Please enter a valid Master IP address.";
                    rbtnAutoIP.setSelected(true);
                    txtMasterManualIP.setEnabled(false);
                } 
            } else {
                valid = false;
                mistakeStr = "Please enter a valid Master IP address.";
                rbtnAutoIP.setSelected(true);
                txtMasterManualIP.setEnabled(false);
            }
        }
        
        if(valid){
           cfg.setBlenderBin(txtBlenderBin.getText());
           
           setVisible(false);
        } else {
            JOptionPane.showMessageDialog(null, mistakeStr, "Notice",
                        JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        setVisible(false);
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnBrowseForBlenderBinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBrowseForBlenderBinActionPerformed
        String blenderBinStr = null;
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Please select the Blender executable");
        if (fileChooser.showDialog(null, "Select") ==
                JFileChooser.APPROVE_OPTION) {
            blenderBinStr = fileChooser.getSelectedFile().getPath();

            if (CLHelper.isBlenderExe(blenderBinStr)) {
                txtBlenderBin.setText(blenderBinStr);
            } else {
                String msg = "'" + blenderBinStr +
                        "' is not a valid Blender \n" + "executable.";
                JOptionPane.showMessageDialog(null, msg, "Notice",
                        JOptionPane.WARNING_MESSAGE);

                log.info("not a valid blender executable: " +
                        blenderBinStr);
            }
        }
    }//GEN-LAST:event_btnBrowseForBlenderBinActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        setVisible(false);
    }//GEN-LAST:event_formWindowClosing

    private void rbtnAutoIPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbtnAutoIPActionPerformed
        txtMasterManualIP.setEnabled(false);
    }//GEN-LAST:event_rbtnAutoIPActionPerformed

    private void rbtnManualIPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbtnManualIPActionPerformed
        txtMasterManualIP.setEnabled(true);
    }//GEN-LAST:event_rbtnManualIPActionPerformed

    private void rbtnAutoFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbtnAutoFileActionPerformed
        cfg.setAutoFileHandling(true);
        pnlCache.setEnabled(true);
        jLabel2.setEnabled(true);
        spinnerCacheSizeLimit.setEnabled(true);
        jLabel3.setEnabled(true);
        jLabel7.setEnabled(true);
        txtCurrentCacheSize.setEnabled(true);
    }//GEN-LAST:event_rbtnAutoFileActionPerformed

    private void rbtnManualFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbtnManualFileActionPerformed
        cfg.setAutoFileHandling(false);
        pnlCache.setEnabled(false);
        jLabel2.setEnabled(false);
        spinnerCacheSizeLimit.setEnabled(false);
        jLabel3.setEnabled(false);
        jLabel7.setEnabled(false);
        txtCurrentCacheSize.setEnabled(false);
    }//GEN-LAST:event_rbtnManualFileActionPerformed

    private void btnFileHelpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFileHelpActionPerformed
        String msg =
                "When enabled, Loki will automatically transfer\n" +
                "the blend file to grunts, and then the resulting\n" +
                "renders sent back to the master.  In this mode you should\n" +
                "always pack your textures and project files into your blend\n" +
                "file.\n" +
                "Additionally, files are cached on the grunts so that\n" +
                "frequently used files are just pulled from the cache\n" +
                "instead of across the network every time they're needed.\n" +
                "Loki is smart enough to notice when the blend file has\n" +
                "changed, even if the file name is the same, and send out\n" +
                "the latest file version to the grunts.\n" +
                "\n" +
                "You'll usually want this enabled, but in certain cases\n" +
                "this is not ideal, for example if you have a large\n" +
                "project with many files, then loki will spend a lot\n" +
                "of time sending files, caching them, etc, and\n" +
                "you'll also end up with copies of all the project\n" +
                "files in each grunt's cache.\n\n" +
                "In such a case select 'Disabled' and setup a network\n" +
                "share that all computers can access, (both read AND write!)\n" +
                "and place project files on this share. Then point Loki's\n" +
                "project paths all to this one central place.\n" +
                "\n" +
                "Such a share can be setup in many ways: Windows share,\n" +
                "NFS, or SSHFS are a few examples. More advanced distributed\n" +
                "file systems such as GPFS or Lustre could also be used.\n" +
                "\n" +
                "IMPORTANT! - When set to 'Disabled' you must make certain\n" +
                "that all computers running loki have the EXACT SAME path\n" +
                "to the project files! For example if you're running Windows\n" +
                "workstations, then your project path might be:\n" +
                "X:\\projects\\blender\\projectx\\\n" +
                "or if all your computers are running linux, then maybe:\n" +
                "/var/projects/blender/projectx/\n";
                JOptionPane.showMessageDialog(null, msg, "About File Management",
                        JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_btnFileHelpActionPerformed
    private final Config cfg;
    //logging
    private static final String className = "net.whn.loki.common.PreferencesForm";
    private static final Logger log = Logger.getLogger(className);
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBrowseForBlenderBin;
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnFileHelp;
    private javax.swing.JButton btnSave;
    private javax.swing.ButtonGroup btngrpFileHandling;
    private javax.swing.ButtonGroup btngrpMasterAddress;
    private javax.swing.ButtonGroup btngrpRole;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JPanel pnlCache;
    private javax.swing.JPanel pnlFileHandling;
    private javax.swing.JPanel pnlGeneral;
    private javax.swing.JPanel pnlGrunt;
    private javax.swing.JPanel pnlMaster;
    private javax.swing.JPanel pnlMasterIp;
    private javax.swing.JPanel pnlNetwork;
    private javax.swing.JPanel pnlRole;
    private javax.swing.JRadioButton rbtnAskMe;
    private javax.swing.JRadioButton rbtnAutoFile;
    private javax.swing.JRadioButton rbtnAutoIP;
    private javax.swing.JRadioButton rbtnGrunt;
    private javax.swing.JRadioButton rbtnManualFile;
    private javax.swing.JRadioButton rbtnManualIP;
    private javax.swing.JRadioButton rbtnMaster;
    private javax.swing.JRadioButton rbtnMasterAndGrunt;
    private javax.swing.JSpinner spinnerCacheSizeLimit;
    private javax.swing.JTextField txtAcceptPort;
    private javax.swing.JTextField txtAnnounceInterval;
    private javax.swing.JTextField txtBlenderBin;
    private javax.swing.JLabel txtCurrentCacheSize;
    private javax.swing.JTextField txtMasterManualIP;
    private javax.swing.JTextField txtMulticastAddress;
    private javax.swing.JTextField txtMulticastPort;
    private javax.swing.JTextField txtTTL;
    // End of variables declaration//GEN-END:variables
}
